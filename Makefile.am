#  Libottery by Nick Mathewson.
#
#  This software has been dedicated to the public domain under the CC0
#  public domain dedication.
#
#  To the extent possible under law, the person who associated CC0 with
#  libottery has waived all copyright and related or neighboring rights
#  to libottery.
#
#  You should have received a copy of the CC0 legalcode along with this
#  work in doc/cc0.txt.  If not, see
#  <http://creativecommons.org/publicdomain/zero/1.0/>.

# Required options to set-up automake.
#    foreign -- this project doesn't need to have a GNU-style file layout.
#    1.9 -- require autmake 1.9 or later
#    subdir-objects -- store object files in subdirectories corresponding
#        to the source that produced them.
AUTOMAKE_OPTIONS = foreign 1.9 subdir-objects

# Find macros in m4/
ACLOCAL_AMFLAGS = -I m4

# VERSION_INFO used for compatibility and versioning with libtool.
#
# To increment a VERSION_INFO (current:revision:age):
#    If the ABI didn't change:
#        Return (current:revision+1:age)
#    If the ABI changed, but it's backward-compatible:
#        Return (current+1:0:age+1)
#    If the ABI changed and it isn't backward-compatible:
#        Return (current+1:0:0)
#
VERSION_INFO = 0:0:0
#
# History:
#    0:0:0 -- Libottery 0.0.0 (before the first releaes)

# We make sure that we've built all of these before we run make check
TEST_PROGS = test/test_vectors test/bench_rng test/dump_bytes	\
	test/test_memclear test/test_shallow test/test_deep	\
	test/test_egd test/fake_egd

# These are actually the programs that constitute our unit tests.  We
# define a few more below too.
TESTS = test/test_memclear test/test_shallow test/test_deep \
	test/test_vector_cmp.sh

check_PROGRAMS = $(TEST_PROGS)

######
# Here are the things we actually install.  The .la suffix indicates that
# we're making a libtool library.
lib_LTLIBRARIES = libottery.la
pkgconfigdir=$(libdir)/pkgconfig
pkgconfig_DATA  = libottery.pc
include_HEADERS	=				\
	src/ottery.h				\
	src/ottery_common.h			\
	src/ottery_nolock.h			\
	src/ottery_st.h

######
# We need to ship these headers, but we don't install them.
noinst_HEADERS = 			\
	src/chacha_merged_ecrypt.h 	\
	src/ottery-internal.h 		\
	src/ottery_entropy_cryptgenrandom.c	\
	src/ottery_entropy_egd.c	\
	src/ottery_entropy_rdrand.c	\
	src/ottery_entropy_urandom.c	\
	test/st_wrappers.h 		\
	test/streams.h 			\
	test/tinytest.h 		\
	test/tinytest_macros.h

#####
# LDFLAGS that we want to add to all LDFLAGS
GENERIC_LDFLAGS = -version-info $(VERSION_INFO)

####
# This source constitutes libottery unconditionally, no matter the build
# options.
OTTERY_CORE_SRC =				\
	src/chacha_merged.c			\
	src/ottery.c				\
	src/ottery_cpuinfo.c			\
	src/ottery_global.c			\
	src/ottery_osrng.c

if X86
# On X86 or X86_64, we build chacha_krovetz.c in an SSE2 flavor and a
# SSE3 flavor, detecting at runtime which to use.  We need to put them
# in separate .la libraries, since automake supports per-library CFLAGS,
# but not per-file CFLAGS.
OTTERY_ARCH_SRC =
OTTERY_LIBS_EXTRA = libchacha-sse3.la libchacha-sse2.la
noinst_LTLIBRARIES = $(OTTERY_LIBS_EXTRA)
libchacha_sse3_la_SOURCES = src/chacha_krovetz.c
libchacha_sse2_la_SOURCES = src/chacha_krovetz.c
libchacha_sse3_la_CFLAGS = -msse3 -DOTTERY_BUILDING_SSE3_IMPL
libchacha_sse2_la_CFLAGS = -msse2 -mno-sse3
CFLAGS_EXTRA = -DOTTERY_HAVE_SSE3_IMPL
else

# On other platforms, we treat chacha_krovetz.c like any other source file.
OTTERY_ARCH_SRC = src/chacha_krovetz.c
CFLAGS_EXTRA =
OTTERY_LIBS_EXTRA =
endif

# Define the CFLAGS to build with
# TODO: Make sure these all work
# TODO: Use -pthread more judiciously.
AM_CFLAGS = -O3 -Wall -W -Wextra -pthread $(CFLAGS_EXTRA) -I $(top_srcdir)/src

#####
# Define how to build libottery itself.
libottery_la_SOURCES = $(OTTERY_CORE_SRC) $(OTTERY_ARCH_SRC)
libottery_la_LDFLAGS = $(GENERIC_LDFLAGS)
libottery_la_LIBADD = $(OTTERY_LIBS_EXTRA)

#####
# Things we need to distribute not listed elsewhere.
EXTRA_DIST =					\
	test/make_test_vectors.py		\
	test/test_vector_cmp.sh			\
	test/test_spec_cmp.sh			\
	test/test_spec_seed			\
	test/hs/Ottery.hs			\
	test/hs/ChaCha.hs			\
	test/hs/test_ottery.hs			\
	etc/doxygen.conf			\
	etc/uncrustify.cfg			\
	COPYING					\
	README.md				\
	TODO


#####
# TESTING

# How to build test/test_vectors, the program that generates test vectors
# for the different chacha implementations
test_test_vectors_SOURCES = test/test_vectors.c test/streams.c
test_test_vectors_LDADD = libottery.la

# Data generated by test/test_vectors and by test/make_test_vectors.py.
# We add this here to make sure that it really *is* generated.
noinst_DATA =					\
	test/test_vectors.expected		\
	test/test_vectors.actual		\
	test/test_vectors.actual-nosimd		\
	test/test_vectors.actual-midrange

# The python script that generates test/test_vectors.expected
noinst_SCRIPTS = test/make_test_vectors.py

###
test/test_vectors.expected: $(top_srcdir)/test/make_test_vectors.py
	$(AM_V_GEN)$(PYTHON) $(top_srcdir)/test/make_test_vectors.py > test/test_vectors.expected

test/test_vectors.actual: test/test_vectors
	$(AM_V_GEN)./test/test_vectors > test/test_vectors.actual

test/test_vectors.actual-midrange: test/test_vectors
	$(AM_V_GEN)./test/test_vectors midrange > test/test_vectors.actual-midrange

test/test_vectors.actual-nosimd: test/test_vectors
	$(AM_V_GEN)./test/test_vectors no-simd > test/test_vectors.actual-nosimd


# How to build the benchmark program.  Note that it currently links openssl
# unconditionally.
# TODO: Fix that.
test_bench_rng_SOURCES = test/bench_rng.c
test_bench_rng_LDADD = libottery.la -lcrypto

# How to build the 'dump some bytes' program we use as input to dieharder.
test_dump_bytes_SOURCES = test/dump_bytes.c
test_dump_bytes_LDADD = libottery.la

# How to build the program we use to make sure our memclear trick works.
test_test_memclear_SOURCES = test/test_memclear.c
test_test_memclear_LDADD = libottery.la

# How to build our 'shallow' unit tests.  These are the ones that assume
# we want to test our RNG qua RNG, but which don't assume we know its
# internals too well.
test_test_shallow_SOURCES = test/test_shallow.c test/tinytest.c
test_test_shallow_LDADD = libottery.la

# How to build our 'deep' unit tests. These ones check the specific
# behavior of the way that ottery wraps its underlying PRF.
test_test_deep_SOURCES = test/test_deep.c test/tinytest.c
test_test_deep_LDADD = libottery.la

# How to build our EGD testing tool and our fake egd implementation.
test_test_egd_SOURCES = test/test_egd.c
test_test_egd_LDADD = libottery.la

# How to build our EGD testing tool and our fake egd implementation.
test_fake_egd_SOURCES = test/fake_egd.c

#####
# If we have a haskell, we can run our "Spec" tests.
if USEGHC

# This C program behaves deterministically in a way that we reimplement
# in Haskell, to make sure that our RNG is following the spec.
check_PROGRAMS += test/test_spec
test_test_spec_SOURCES = test/test_spec.c
test_test_spec_LDADD = libottery.la

# More generated info that we'll need to make sure we generate to run
# our unit tests.
noinst_DATA += 				\
	test/hs/test_ottery.output 	\
	test/test_spec.output

# How to build test_ottery, the Haskell test implementation of the
# libottery spec
test/hs/test_ottery: test/hs/Ottery.hs test/hs/ChaCha.hs test/hs/test_ottery.hs
	$(AM_V_GEN)$(MKDIR_P) ./test/hs
	$(AM_V_AT)$(GHC) -o test/hs/test_ottery \
		-odir ./test/hs -hidir ./test/hs \
		$(top_srcdir)/test/hs/Ottery.hs \
		$(top_srcdir)/test/hs/ChaCha.hs \
		$(top_srcdir)/test/hs/test_ottery.hs

# Rule to generate the expected output from the haskell code
test/hs/test_ottery.output: test/hs/test_ottery test/test_spec
	$(AM_V_GEN)./test/hs/test_ottery `./test/test_spec --blocks-per-call` > test/hs/test_ottery.output

# Rule to generate the actual output which should match the haskell code.
test/test_spec.output: test/test_spec test/test_spec_seed
	$(AM_V_GEN)./test/test_spec $(top_srcdir)/test/test_spec_seed > test/test_spec.output

TESTS += test/test_spec_cmp.sh

endif


#####
# Files to remove on 'make clean' not listed elsewhere.
CLEANFILES = $(noinst_DATA) test/hs/*.hi test/hs/*.o test/hs/test_ottery


#####
# MISCELLANEOUS TARGETS

# Rebuild the doxygen documentation
doxygen:
	doxygen etc/doxygen.conf

# Files to clean up with uncrustify.
UNCRUSTIFY_FILES =				\
		src/ottery.c			\
		src/ottery_cpuinfo.c		\
		src/ottery_global.c		\
		src/ottery_osrng.c		\
		$(include_HEADERS)		\
		src/chacha_merged_ecrypt.h 	\
		src/ottery-internal.h 		\
		test/st_wrappers.h 		\
		test/streams.h 			\
		test/dump_bytes.c		\
		test/streams.c			\
		test/test_deep.c		\
		test/test_memclear.c		\
		test/test_shallow.c		\
		test/test_spec.c		\
		test/test_vectors.c

# Ignoring these, because they're not ours:
#		src/chacha_merged.c
#		test/tinytest.h
#		test/tinytest_macros.h
# 		src/chacha_krovetz.c

uncrustify:
	uncrustify -c etc/uncrustify.cfg --replace -l C $(UNCRUSTIFY_FILES)

reset-gcov:
	rm -f {src,test}/*.gcda

#coverage:
#	gcov -o src $(OTTERY_BASE_OBJS:.o=.c)
#	if [ "$(X86)" = 1 ]; then 					\
#	   gcov -o src/chacha_krovetz_sse2.o src/chacha_krovetz.c && 	\
#	       mv chacha_krovetz.c.gcov chacha_krovetz_sse2.c.gcov ;	\
#	   gcov -o src/chacha_krovetz_sse3.o src/chacha_krovetz.c && 	\
#	       mv chacha_krovetz.c.gcov chacha_krovetz_sse3.c.gcov ;	\
#	else 								\
#	   gcov -o src src/chacha_krovetz.c; 				\
#	fi
