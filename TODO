
Hey, it's a solo project! I get to use this TODO format again!

BEFORE FIRST VERSION

  o Make both implementations work n*64-bytes at a time, with
    persistent state. Use that as a backend for the RNG.
  o Add a frontend that wraps the 64-bytes backend into a
    proper bytewise RNG.
  o Seed from the OS.  Facility to seed from extra stuff if
    you're paranoid.
  o frontend that returns an unsigned.

  o Thread-safety: lock the thing.
    o pthreads
  o Handle fork() safely.
    o getpid() on each call?
  o Code to clear the stack.
  o A mixing/stirring feature

  o frontend that returns an unsigned within a range.

  - Add a benchmarking/timing feature
  - 100% test coverage.

BEFORE FINAL VERSION

  - Handle fork even better
    - mutex/state in a shared mmap?

  - Windows port
    - Windows threads
    - No need for fork detection.
  - Drop endianness conversion; not needed for PRNG usage

  - Port to MSVC
  - MAYBE, a high-security/low-security pair.
    - Don't use less than chacha20 for the high-security one.

  - Test on altivec, fix whatever I broke there.

  - Drop support for 64-bit counters: 256GB is enough for anyone.



